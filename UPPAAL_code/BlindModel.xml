<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>import "./libraries/store_data"
#include "data_arrays.h"

double S(double t);
double H(double heating_setpoint, double T_current);
double O (double lux);
double derivative_function(double T_a, double T_r, double S, double H, double O, double a_a, double a_s, double a_h, double a_v, double a_o);

const int hour = 60;
const double g_value = 0.45; //Value gotten from Rasmus
const double blind_eff = 0.5; //assumed value (change if we find real data)
const double watt_person = 100; //Assumed watt coming from 1 person
const double lux_person = 300; //Lux per person
clock x;
broadcast chan fetch;
broadcast chan new_data;


typedef struct Room {
    string name;
    double window_size;
    int heater;
    double constants[5];
} Room;

Room r213 = {"1.213", 3.64, 372, {0.0,0.0,0.0,0.0,0.0}};
Room r215 = {"1.215", 5.46, 422, {0.0,0.0,0.0,0.0,0.0}};
Room r217 = {"1.217", 3.64, 379, {0.0,0.0,0.0,0.0,0.0}};
Room r229 = {"1.229", 5.18, 758, {0.0,0.0,0.0,0.0,0.0}};
Room r231 = {"1.231", 6.86, 758, {0.0,0.0,0.0,0.0,0.0}};
Room r233 = {"1.233", 7, 758, {0.0,0.0,0.0,0.0,0.0}};

bool blinds;
bool heater;


double valve = 0.0; 
double S; //Data from CSV file (Collected from BMS)
double T_r;
double T_a;
double heating_setpoint;
double cooling_setpoint;
double lux;
double T_setpoint = store_data.setpoint;



double S (double t, Room room) {
    return solar_effect[t] * g_value * room.window_size;
}


double H (double heating_setpoint, double T_current, Room room) {
    if (T_r &lt;= heating_setpoint) {
        valve += 0.25;
        if (valve &gt; 1.0) {
            valve = 1.0;
        }
    }
    else if (T_current &gt; heating_setpoint) {
        valve -= 0.25;
        if (valve &lt; 0.0) {
            valve = 0.0;
        }
    }
    return room.heater * valve;
}

double O (double lux) {
    return lux/lux_person * watt_person
}

double derivative_function(double T_a, double T_r, double S, double H, double O, double a_a, double a_s, double a_h, double a_v, double a_o) {
    return (T_a - T_r) * a_s + S * a_s + H * a_h + (T_a - T_r) * a_v + O * a_o
}




</declaration>
	<template>
		<name x="5" y="5">Optimization</name>
		<declaration>// Place local declarations here.
</declaration>
		<location id="id0" x="0" y="0">
			<label kind="invariant" x="-212" y="25">D'== (T_setpoint - T_room) * (T_setpoint - T_room)</label>
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name>DataCollection</name>
		<declaration>const int P = 15; //Swicthing period, 15 min</declaration>
		<location id="id1" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x &lt;= P</label>
		</location>
		<init ref="id1"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-85" y="-161">x &gt;= P</label>
			<label kind="synchronisation" x="-85" y="-178">fetch!</label>
			<nail x="-85" y="-136"/>
			<nail x="76" y="-136"/>
		</transition>
	</template>
	<template>
		<name>ModBlinds</name>
		<location id="id3" x="238" y="0">
			<name x="221" y="-34">Down</name>
		</location>
		<location id="id4" x="-204" y="0">
			<name x="-214" y="-34">Up</name>
		</location>
		<init ref="id4"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="263" y="-110">x == P,
blinds == 0 &amp;&amp; T_room &gt;= T_setpoint</label>
			<label kind="assignment" x="297" y="0">x = 0</label>
			<nail x="340" y="-68"/>
			<nail x="340" y="0"/>
		</transition>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-501" y="-110">x == P,
blinds == 1 &amp;&amp; T_room &lt;= T_setpoint</label>
			<label kind="assignment" x="-297" y="0">x = 0</label>
			<nail x="-306" y="-68"/>
			<nail x="-306" y="0"/>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-127" y="-153">x == P,
blinds == 0 &amp;&amp; T_room &lt; T_setpoint</label>
			<label kind="assignment" x="-59" y="-110">x = 0, blinds = 1</label>
			<nail x="8" y="-85"/>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-127" y="8">x == P,
blinds == 1 &amp;&amp; T_room &gt; T_setpoint</label>
			<label kind="assignment" x="-59" y="51">x = 0, blinds = 0</label>
		</transition>
	</template>
	<template>
		<name>ModHeater</name>
		<location id="id9" x="751" y="141">
			<name x="734" y="107">Off</name>
		</location>
		<location id="id10" x="309" y="141">
			<name x="299" y="107">On</name>
		</location>
		<transition id="id11">
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="776" y="31">x == P,
heater == 0 &amp;&amp; T_room &gt; T_setpoint</label>
			<label kind="assignment" x="810" y="141">x = 0</label>
			<nail x="853" y="73"/>
			<nail x="853" y="141"/>
		</transition>
		<transition id="id12">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="guard" x="12" y="31">x == P,
heater == 1 &amp;&amp; T_room &lt; T_setpoint</label>
			<label kind="assignment" x="216" y="141">x = 0</label>
			<nail x="207" y="73"/>
			<nail x="207" y="141"/>
		</transition>
		<transition id="id13">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="386" y="-12">x == P,
heater == 0 &amp;&amp; T_room &lt; T_setpoint</label>
			<label kind="assignment" x="454" y="31">x = 0, heater = 1</label>
			<nail x="521" y="56"/>
		</transition>
		<transition id="id14">
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="386" y="149">x == P,
heater == 1 &amp;&amp; T_room &gt; T_setpoint</label>
			<label kind="assignment" x="454" y="192">x = 0, heater = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
